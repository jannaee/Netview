{"id":"scripts/data.js","dependencies":[{"name":"/Users/jsick/Repos/sandbox/Netview/package.json","includedInParent":true,"mtime":1567023579273},{"name":"/data/en_US.json","loc":{"line":1,"column":17},"parent":"/Users/jsick/Repos/sandbox/Netview/scripts/data.js","resolved":"/Users/jsick/Repos/sandbox/Netview/data/en_US.json"}],"generated":{"js":"\"use strict\";\n\nvar _en_US = _interopRequireDefault(require(\"/data/en_US.json\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconsole.table(_en_US.default.heading); // const idb = require('/idb')\n// const eng_data = require(\"../data/en_US.json\")\n// const openRequest = indexedDB.open('testData', 1);\n// // success (database is ready and database object exist in openRequest.result)\n// openRequest.onsuccess = function() {\n//   let db = openRequest.result;\n//   // continue to work with database using db object\n//  db.onversionchange = function() {\n//     db.close();\n//     console.log(\"Out of Date Database\")\n//     //this will trigger a parallel update in the case a user\n//     //has two browsers open at the same time with differnt versions\n//   };\n// };\n// // error (opening of database fail)\n// openRequest.onerror = function() {\n//   console.error(\"Error\", openRequest.error);\n// };\n// // upgradeneeded (database is ready but version is old)\n// openRequest.onupgradeneeded = function() {\n//   // triggers if the client had no database\n//   // ...perform initialization...\n// };\n// openRequest.onblocked = function() {\n//   //if another connection is still open and the db.close doesn't work or isn't used this will closed\n// };\n// // Now create and object store\n// // Neat things primitive data types can be stored\n// // Note: there needs to be a unique key for every value in the store and this option is asyncrhounous so no\n// //await is needed\n// // db.createObjectStore('netflixoriginals', {keyPath, keyOptions});"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"scripts/data.js","original":{"line":1,"column":0}},{"name":"console","generated":{"line":7,"column":0},"source":"scripts/data.js","original":{"line":3,"column":0}},{"generated":{"line":7,"column":7},"source":"scripts/data.js","original":{"line":3,"column":7}},{"name":"table","generated":{"line":7,"column":8},"source":"scripts/data.js","original":{"line":3,"column":8}},{"generated":{"line":7,"column":13},"source":"scripts/data.js","original":{"line":3,"column":0}},{"name":"data","generated":{"line":7,"column":14},"source":"scripts/data.js","original":{"line":3,"column":14}},{"name":"heading","generated":{"line":7,"column":29},"source":"scripts/data.js","original":{"line":3,"column":19}},{"generated":{"line":7,"column":36},"source":"scripts/data.js","original":{"line":3,"column":0}},{"generated":{"line":7,"column":39},"source":"scripts/data.js","original":{"line":5,"column":0}},{"generated":{"line":8,"column":0},"source":"scripts/data.js","original":{"line":6,"column":0}},{"generated":{"line":9,"column":0},"source":"scripts/data.js","original":{"line":7,"column":0}},{"generated":{"line":10,"column":0},"source":"scripts/data.js","original":{"line":10,"column":0}},{"generated":{"line":11,"column":0},"source":"scripts/data.js","original":{"line":11,"column":0}},{"generated":{"line":12,"column":0},"source":"scripts/data.js","original":{"line":12,"column":0}},{"generated":{"line":13,"column":0},"source":"scripts/data.js","original":{"line":13,"column":0}},{"generated":{"line":14,"column":0},"source":"scripts/data.js","original":{"line":14,"column":0}},{"generated":{"line":15,"column":0},"source":"scripts/data.js","original":{"line":15,"column":0}},{"generated":{"line":16,"column":0},"source":"scripts/data.js","original":{"line":16,"column":0}},{"generated":{"line":17,"column":0},"source":"scripts/data.js","original":{"line":17,"column":0}},{"generated":{"line":18,"column":0},"source":"scripts/data.js","original":{"line":18,"column":0}},{"generated":{"line":19,"column":0},"source":"scripts/data.js","original":{"line":19,"column":0}},{"generated":{"line":20,"column":0},"source":"scripts/data.js","original":{"line":21,"column":0}},{"generated":{"line":21,"column":0},"source":"scripts/data.js","original":{"line":24,"column":0}},{"generated":{"line":22,"column":0},"source":"scripts/data.js","original":{"line":25,"column":0}},{"generated":{"line":23,"column":0},"source":"scripts/data.js","original":{"line":26,"column":0}},{"generated":{"line":24,"column":0},"source":"scripts/data.js","original":{"line":27,"column":0}},{"generated":{"line":25,"column":0},"source":"scripts/data.js","original":{"line":29,"column":0}},{"generated":{"line":26,"column":0},"source":"scripts/data.js","original":{"line":30,"column":0}},{"generated":{"line":27,"column":0},"source":"scripts/data.js","original":{"line":31,"column":0}},{"generated":{"line":28,"column":0},"source":"scripts/data.js","original":{"line":32,"column":0}},{"generated":{"line":29,"column":0},"source":"scripts/data.js","original":{"line":33,"column":0}},{"generated":{"line":30,"column":0},"source":"scripts/data.js","original":{"line":36,"column":0}},{"generated":{"line":31,"column":0},"source":"scripts/data.js","original":{"line":37,"column":0}},{"generated":{"line":32,"column":0},"source":"scripts/data.js","original":{"line":38,"column":0}},{"generated":{"line":33,"column":0},"source":"scripts/data.js","original":{"line":42,"column":0}},{"generated":{"line":34,"column":0},"source":"scripts/data.js","original":{"line":43,"column":0}},{"generated":{"line":35,"column":0},"source":"scripts/data.js","original":{"line":44,"column":0}},{"generated":{"line":36,"column":0},"source":"scripts/data.js","original":{"line":45,"column":0}},{"generated":{"line":37,"column":0},"source":"scripts/data.js","original":{"line":47,"column":0}}],"sources":{"scripts/data.js":"import data from '/data/en_US.json'\n\nconsole.table(data.heading)\n\n// const idb = require('/idb')\n// const eng_data = require(\"../data/en_US.json\")\n// const openRequest = indexedDB.open('testData', 1);\n\n\n// // success (database is ready and database object exist in openRequest.result)\n// openRequest.onsuccess = function() {\n//   let db = openRequest.result;\n//   // continue to work with database using db object\n//  db.onversionchange = function() {\n//     db.close();\n//     console.log(\"Out of Date Database\")\n//     //this will trigger a parallel update in the case a user\n//     //has two browsers open at the same time with differnt versions\n//   };\n\n// };\n\n\n// // error (opening of database fail)\n// openRequest.onerror = function() {\n//   console.error(\"Error\", openRequest.error);\n// };\n\n// // upgradeneeded (database is ready but version is old)\n// openRequest.onupgradeneeded = function() {\n//   // triggers if the client had no database\n//   // ...perform initialization...\n// };\n\n\n// openRequest.onblocked = function() {\n//   //if another connection is still open and the db.close doesn't work or isn't used this will closed\n// };\n\n\n\n// // Now create and object store\n// // Neat things primitive data types can be stored\n// // Note: there needs to be a unique key for every value in the store and this option is asyncrhounous so no\n// //await is needed\n\n// // db.createObjectStore('netflixoriginals', {keyPath, keyOptions});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},"lineCount":null}},"error":null,"hash":"ebf3624a0a949aae8d7f0afb1437fb38","cacheData":{"env":{}}}